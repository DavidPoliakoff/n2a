options
{
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    NODE_DEFAULT_VOID = true;          // Only create Node classes for the #Tokens
}

PARSER_BEGIN(ExpressionParser)

/*
Copyright 2013,2016 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
Under the terms of Contract DE-NA0003525 with NTESS,
the U.S. Government retains certain rights in this software.
*/

package gov.sandia.n2a.language.parse;

import gov.sandia.n2a.language.type.Scalar;
import gov.sandia.n2a.language.type.Text;

import java.io.StringReader;
import java.util.ServiceLoader;

import javax.measure.Unit;
import javax.measure.format.ParserException;
import javax.measure.format.UnitFormat;
import javax.measure.spi.ServiceProvider;
import javax.measure.spi.UnitFormatService;

public class ExpressionParser
{
    public static UnitFormat unitFormat;

    public static SimpleNode parse (String line) throws gov.sandia.n2a.language.ParseException
    {
        if (unitFormat == null)
      	{
            ServiceLoader<ServiceProvider> loader = ServiceLoader.load (ServiceProvider.class);
            UnitFormatService ufs = ((ServiceProvider) loader.iterator ().next ()).getUnitFormatService ();
            unitFormat = ufs.getUnitFormat ("ASCII");
        }

        try
        {
            ExpressionParser parser = new ExpressionParser (new StringReader (line));
            Node startNode = parser.Start ();
            SimpleNode result = (SimpleNode) startNode.jjtGetChild (0);
            return result;
        }
        catch (TokenMgrError t)
        {
            String column = t.getMessage ().split ("column ", 2)[1].trim ().split ("\\.", 2)[0];  // See TokenMgrError.LexicalError() for the structure of the string we are pulling apart here.
            throw new gov.sandia.n2a.language.ParseException ("Lexical error:", line, Integer.parseInt (column) - 1);
        }
        catch (ParseException t)
        {
            String message = t.getMessage ();
            if (message == null  ||  message.isEmpty ()) message = "Syntax error";
            message += ":";
            int column = 0;
            if (t.currentToken != null  &&  t.currentToken.next != null) column = t.currentToken.next.beginColumn;
            throw new gov.sandia.n2a.language.ParseException (message, line, column - 1);
        }
    }
}
PARSER_END(ExpressionParser)


// Tokens --------------------------------------------------------------------

TOKEN_MGR_DECLS:
{
    int parenDepth;  // For counting parentheses nesting in PossibleUnit mode
}

<*> SKIP:
{
    " " | "\t" | "\n"
}

<DEFAULT> TOKEN:
{
      <COMMA:   "," >
    | <SEMI:    ";" >
    | <GT:      ">" >
    | <LT:      "<" >
    | <EQ:      "==">
    | <LE:      "<=">
    | <GE:      ">=">
    | <NE:      "!=">
    | <AND:     "&&">
    | <OR:      "||">
    | <PLUS:    "+" >
    | <MINUS:   "-" >
    | <MUL:     "*" >
    | <HADAMUL: "&" >
    | <DIV:     "/" >
    | <MOD:     "%" >
    | <NOT:     "!" >
    | <POWER:   "^" >
    | <TILDE:   "~" >
    | <LSQ:     "[" >
    | <RSQ:     "]" >
    | <LRND:    "(" >
    | <RRND:    ")" >

    | <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(<PRIME>)*>
    | <#LETTER: ["$", ".", "A"-"Z", "_", "a"-"z", "\u0080"-"\uffff"]>  // Past lower-ASCII we don't care about character class.
    | <#DIGIT:  ["0"-"9"]>
    | <#PRIME:  "'">

    | <NUMBER:
          (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
        |            "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+                (<EXPONENT>)?> : PossibleUnit
    | <#EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+>

    | <STRING: "\"" ((~["\"","\\"]) | ("\\" ["n","t","b","r","f","\\","'","\""]))* "\"">
}

<PossibleUnit> TOKEN:
{
      <UNIT: (["\"","#","'","0"-":","?"-"]","_"-"{","}"])+>  // Everything in ASCII 33-126, except forbidden start characters. Notice that square brackets are allowed at this level.
    | <UCOMMA:   ","  > {matchedToken.kind = ExpressionParserConstants.COMMA;  }: DEFAULT
    | <USEMI:    ";"  > {matchedToken.kind = ExpressionParserConstants.SEMI;   }: DEFAULT
    | <UGT:      ">"  > {matchedToken.kind = ExpressionParserConstants.GT;     }: DEFAULT
    | <ULT:      "<"  > {matchedToken.kind = ExpressionParserConstants.LT;     }: DEFAULT
    | <UEQ:      "==" > {matchedToken.kind = ExpressionParserConstants.EQ;     }: DEFAULT
    | <ULE:      "<=" > {matchedToken.kind = ExpressionParserConstants.LE;     }: DEFAULT
    | <UGE:      ">=" > {matchedToken.kind = ExpressionParserConstants.GE;     }: DEFAULT
    | <UNE:      "!=" > {matchedToken.kind = ExpressionParserConstants.NE;     }: DEFAULT
    | <UAND:     "&&" > {matchedToken.kind = ExpressionParserConstants.AND;    }: DEFAULT
    | <UOR:      "||" > {matchedToken.kind = ExpressionParserConstants.OR;     }: DEFAULT
    | <UPLUS:    "+"  > {matchedToken.kind = ExpressionParserConstants.PLUS;   }: DEFAULT
    | <UMINUS:   "-"  > {matchedToken.kind = ExpressionParserConstants.MINUS;  }: DEFAULT
    | <UMUL:     "*"  > {matchedToken.kind = ExpressionParserConstants.MUL;    }: DEFAULT
    | <UHADAMUL: "&"  > {matchedToken.kind = ExpressionParserConstants.HADAMUL;}: DEFAULT
    | <UDIV:     "/"  > {matchedToken.kind = ExpressionParserConstants.DIV;    }: DEFAULT
    | <UMOD:     "%"  > {matchedToken.kind = ExpressionParserConstants.MOD;    }: DEFAULT
    | <UNOT:     "!"  > {matchedToken.kind = ExpressionParserConstants.NOT;    }: DEFAULT
    | <UPOWER:   "^"  > {matchedToken.kind = ExpressionParserConstants.POWER;  }: DEFAULT
    | <UTILDE:   "~"  > {matchedToken.kind = ExpressionParserConstants.TILDE;  }: DEFAULT
    | <PURRND:   ")"  > {matchedToken.kind = ExpressionParserConstants.RRND;   }: DEFAULT
    | <PULRND:   "("  > {matchedToken.kind = ExpressionParserConstants.UNIT; parenDepth = 1;}: FullUCUM
}

<FullUCUM> TOKEN:
{
      <UUNIT: (["!"-"'","*"-"~"])+>  // Everything in ASCII 33-126, except parentheses
                   {matchedToken.kind = ExpressionParserConstants.UNIT;}
    | <ULRND: "("> {matchedToken.kind = ExpressionParserConstants.UNIT; parenDepth++;}
    | <URRND: ")"> {matchedToken.kind = ExpressionParserConstants.UNIT; parenDepth--; if (parenDepth <= 0) SwitchTo (PossibleUnit);}
}


// Grammar -------------------------------------------------------------------

ASTStart Start() #Start : {}
{
    CommaExpression() <EOF>
    {
        return jjtThis;
    }
}

void CommaExpression() #List : {}
{
    OrExpression() (<COMMA> OrExpression())*
    {
    	jjtThis.jjtSetValue("LIST");
    }
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR> AndExpression()
            {
                jjtThis.jjtSetValue("||");
            }
        ) #Operator(2)
    )*
}

void AndExpression() : {}
{
    EqualExpression()
    (
        (<AND> EqualExpression()
            {
                jjtThis.jjtSetValue("&&");
            }
        ) #Operator(2)
    )*
}

void EqualExpression() : {}
{
    RelationalExpression()
    (
        (<NE> RelationalExpression()
            {
                jjtThis.jjtSetValue("!=");
            }
        ) #Operator(2)
          |
        (<EQ> RelationalExpression()
            {
                jjtThis.jjtSetValue("==");
            }
        ) #Operator(2)
    )*
}

void RelationalExpression() : {}
{
    AdditiveExpression()
    (
        (<LT> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<");
            }
        ) #Operator(2)
          |
        (<GT> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">");
            }
        ) #Operator(2)
          |
        (<LE> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<=");
            }
        ) #Operator(2)
          |
        (<GE> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">=");
            }
        ) #Operator(2)
    )*
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        (<PLUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("+");
            }
        ) #Operator(2)
          |
        (<MINUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("-");
            }
        ) #Operator(2)
    )*
}

void MultiplicativeExpression() : {}
{
    PowerExpression()
    (
        (<MUL> PowerExpression()
            {
                jjtThis.jjtSetValue("*");
            }
        ) #Operator(2)
          |
        (<HADAMUL> PowerExpression()
            {
                jjtThis.jjtSetValue("&");
            }
        ) #Operator(2)
          |
        (<DIV> PowerExpression()
            {
                jjtThis.jjtSetValue("/");
            }
        ) #Operator(2)
          |
        (<MOD> PowerExpression()
            {
                jjtThis.jjtSetValue("%");
            }
        ) #Operator(2)
    )*
}

// TODO: Make this rule right-associative. This is, a^b^c is parsed as a^(b^c).
void PowerExpression() : {}
{
    UnaryExpression()
    (
        (<POWER> UnaryExpression()
            {
                jjtThis.jjtSetValue("^");
            }
        ) #Operator(2)
    )*
}

// TODO: Make this rule recursive and right-associative.
void UnaryExpression() : {}
{
    (<MINUS> PrimaryExpression()
        {
            jjtThis.jjtSetValue("UM");
        }
    ) #Operator(1)
      |
    (<NOT> PrimaryExpression()
        {
            jjtThis.jjtSetValue("!");
        }
    ) #Operator(1)
      |
    (<TILDE> PrimaryExpression()
        {
            jjtThis.jjtSetValue("~");
        }
    ) #Operator(1)
      |
    PrimaryExpression()
}

void PrimaryExpression() : {}
{
    Constant()
      |
    Identifier()
      |
    <LRND> OrExpression() <RRND> 
      |
    MatrixExpression()
}

void MatrixExpression() #Matrix : {}
{
    <LSQ> CommaExpression() (<SEMI> CommaExpression())* <RSQ>
}

// TODO: Make () an operation that applies to any expression, not just variables and functions.
void Identifier() #Identifier : {Token t; Token p = null;}
{
    t = <IDENTIFIER> [p = <LRND> [CommaExpression()] <RRND>]
    {
        if (p == null) jjtThis.jjtSetValue(t.image);
        else           jjtThis.jjtSetValue(t.image + "()");
    }
}

void Constant() #Constant : {Token t; Token u; String UCUM = "";}
{
    t = <STRING>
    {
        Text text = new Text (t.image.substring (1, t.image.length() - 1));
        text.removeEscapes ();
        jjtThis.jjtSetValue (text);
    }
      |
    t = <NUMBER> (u = <UNIT> {UCUM += u.image;})*
    {
        double value = Double.parseDouble (t.image);
        if (! UCUM.isEmpty ())
        {
            try
            {
                Unit unit = unitFormat.parse (UCUM);
                Unit si   = unit.getSystemUnit ();
                value = unit.getConverterTo (si).convert (value);
            }
            catch (ParserException e)
            {
                ParseException p = new ParseException ("UCUM syntax error");
                p.currentToken = t;
                t.next.beginColumn += e.getPosition ();
                throw p;
            }
        }
        jjtThis.jjtSetValue (new Scalar (value));
    }
}
