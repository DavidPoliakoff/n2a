options
{
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_EXCEPTION = "ParseException";
    NODE_DEFAULT_VOID = true;          // Only create Node classes for the #Tokens
    NODE_CLASS = "ASTNodeBase";
}

PARSER_BEGIN(ExpressionParser)

/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

package gov.sandia.n2a.language.parse;

import java.lang.reflect.Field;
import java.io.StringReader;

import gov.sandia.n2a.language.type.Scalar;
import gov.sandia.n2a.language.type.Text;

import replete.util.ReflectionUtil;

import javax.measure.unit.*;

public class ExpressionParser
{
    public static ASTNodeBase parse (String line) throws ParseException
    {
        if (line == null)
        {
            throw new IllegalArgumentException ("Line to parse cannot be null.");
        }

        try
        {
            ExpressionParser parser = new ExpressionParser (new StringReader (line + "\n"));
            Node startNode = parser.Start ();
            ASTNodeBase result = (ASTNodeBase) startNode.jjtGetChild(0);
            return result;
        }
        catch (ParseException p)
        {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            ReflectionUtil.set ("detailMessage", p, p.getMessage ().trim () + "\nSource Line: " + line);
            throw p;
        }
        catch (TokenMgrError t)
        {
            ParseException p = new ParseException (t.getMessage () + "\nSource Line: " + line);
            try
            {
                Field f = Throwable.class.getDeclaredField ("cause");
                f.setAccessible (true);
                f.set (p, t);
            }
            catch (Exception e) {}
            throw p;
        }
    }
    
    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len)
                break;

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len)
            output.append(inputStr.substring(p));

        return output.toString();
    }
}
PARSER_END(ExpressionParser)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>         // Should include EOF, will add \n in input until this is fixed.
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

<DEFAULT> TOKEN:
{
    <FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ (<EXPONENT>)? > |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+> |
    <STRING_LITERAL:
        "\""
        (     (~["\"","\\","\n","\r"])
            | ("\\" ["n","t","b","r","f","\\","'","\""])
        )*
        "\"" >
}

<DEFAULT> TOKEN:
{
    <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(<TICKMARK>)*> |
    <#LETTER: ["A"-"Z", "a"-"z", "_", "$", "."]> |
    <#DIGIT: ["0"-"9"] > | 
    <#TICKMARK: "'" >
}

<DEFAULT> TOKEN:
{
    < ASSIGN: <NASSIGN>|<AASSIGN>|<CASSIGN> > |

    < #NASSIGN: "="  > |
    < #AASSIGN: "+=" > |
    < #CASSIGN: ":=" > |
    
    < COMMA: ","  > |
    < SEMI:  ";"  > |
    < GT:    ">"  > |
    < LT:    "<"  > |
    < EQ:    "==" > |
    < LE:    "<=" > |
    < GE:    ">=" > |
    < NE:    "!=" > |
    < AND:   "&&" > |
    < OR:    "||" > |
    < PLUS:  "+"  > |
    < MINUS: "-"  > |
    < MUL:   "*"  > |
    < DIV:   "/"  > |
    < MOD:   "%"  > |
    < NOT:   "!"  > |
    < POWER: "^"  > |
    < TILDE: "~"  > |
    < LSQ:   "["  > |
    < RSQ:   "]"  > |
    < LRND:  "("  > |
    < RRND:  ")"  >
}

/* Switches to the IN_UNITS lexical state for different parsing of the unit expressions */
<DEFAULT> TOKEN:
{
    < LBRC: "{" > : IN_UNITS
}

/* Switches back to the DEFAULT lexical state for normal parsing */
<IN_UNITS> TOKEN:
{
    < RBRC: "}" > : DEFAULT
}

/* Unit expressions are allowed to be a lot less structured, as the
   parsing will be done by JScience, not this parser. Only those characters
   that could conceivably be present in unit expressions are allowed here. */
<IN_UNITS> TOKEN:
{
    < UNITS: (["A"-"Z", "a"-"z", "_", "0"-"9", ".", "(", ")", "+", "-", "*", "/", "^"])+ >
}


/***************************************************************
GRAMMAR START
***************************************************************/

ASTStart Start() #Start : {}
{
    AssignExpression() <EOF>
    {
        return jjtThis;
    }
}

void AssignExpression() : {
    Token t;
}
{    
    LOOKAHEAD(Variable() <ASSIGN>) Variable() t = <ASSIGN> CommaExpression()
    {
        jjtThis.jjtSetValue(t.image);
    } #OpNode(2)
      |
    CommaExpression()
}

void CommaExpression() #ListNode : {}
{
    OrExpression() (<COMMA> OrExpression())*
    {
    	jjtThis.jjtSetValue("LIST");
    }
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR> AndExpression()
            {
                jjtThis.jjtSetValue("||");
            }
        ) #OpNode(2)
    )*
}

void AndExpression() : {}
{
    EqualExpression()
    (
        (<AND> EqualExpression()
            {
                jjtThis.jjtSetValue("&&");
            }
        ) #OpNode(2)
    )*
}

void EqualExpression() : {}
{
    RelationalExpression()
    (
        (<NE> RelationalExpression()
            {
                jjtThis.jjtSetValue("!=");
            }
        ) #OpNode(2)
          |
        (<EQ> RelationalExpression()
            {
                jjtThis.jjtSetValue("==");
            }
        ) #OpNode(2)
    )*
}

void RelationalExpression() : {}
{
    AdditiveExpression()
    (
        (<LT> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<");
            }
        ) #OpNode(2)
          |
        (<GT> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">");
            }
        ) #OpNode(2)
          |
        (<LE> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<=");
            }
        ) #OpNode(2)
          |
        (<GE> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">=");
            }
        ) #OpNode(2)
    )*
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        (<PLUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("+");
            }
        ) #OpNode(2)
          |
        (<MINUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("-");
            }
        ) #OpNode(2)
    )*
}

void MultiplicativeExpression() : {}
{
    UnitExpression()
    (
        (<MUL> UnitExpression()
            {
                jjtThis.jjtSetValue("*");
            }
        ) #OpNode(2)
          |
        (<DIV> UnitExpression()
            {
                jjtThis.jjtSetValue("/");
            }
        ) #OpNode(2)
          |
        (<MOD> UnitExpression()
            {
                jjtThis.jjtSetValue("%");
            }
        ) #OpNode(2)
    )*
}

/* Unary Expression With Units:
   Units act as a post-fix operator with precedence
   higher than +, -, *, /, and %, but lower than 
   ^, unary minus, unary plus, and element []. */
   
void UnitExpression() : {
    Token t;
}
{
    LOOKAHEAD(UnaryExpression() <LBRC>)
    (UnaryExpression() <LBRC> t = <UNITS> <RBRC>
        {
            jjtThis.jjtSetValue(Unit.valueOf(t.image));
        }
    ) #UnitNode
      | 
    UnaryExpression()
}

void UnaryExpression() : {}
{
    (<MINUS> PowerExpression()
        {
            jjtThis.jjtSetValue("UM");
        }
    ) #OpNode(1)
      |
    (<NOT> PowerExpression()
        {
            jjtThis.jjtSetValue("!");
        }
    ) #OpNode(1)
      |
    (<TILDE> PowerExpression()
        {
            jjtThis.jjtSetValue("~");
        }
    ) #OpNode(1)
      |
    PowerExpression()
}

// TODO: Make this rule recursive and right-associative
// In other words: a^b^c is parsed as a^(b^c)
void PowerExpression() : {}
{
    PrimaryExpression()
    [
        (<POWER> PrimaryExpression()
            {
                jjtThis.jjtSetValue("^");
            }
        ) #OpNode(2)
    ]
}

void PrimaryExpression() : {}
{
    Constant()
      |
    LOOKAHEAD({getToken(1).kind == IDENTIFIER && getToken(2).kind == LRND}) Function()
      |
    Variable()
      |
    <LRND> OrExpression() <RRND> 
      |
    MatrixExpression()
}

void MatrixExpression() #MatrixNode : {
    jjtThis.jjtSetValue("MATRIX");
}
{
    <LSQ> CommaExpression() (<SEMI> CommaExpression())* <RSQ>
}

void Variable() #VarNode : {
    Token t;
}
{
    t = <IDENTIFIER> [<LSQ> CommaExpression() <RSQ>]
    {
        jjtThis.jjtSetValue(t.image);
    }
}

void Function() #OpNode : {
    Token t;
}
{
    t = <IDENTIFIER> <LRND> [CommaExpression()] <RRND>
    {
        jjtThis.jjtSetValue(t.image);
    }
}

void Constant() #Constant : {
    Token t;
}
{
    t = <STRING_LITERAL>
    {
        String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtThis.jjtSetValue(new Text (temp));
    }
      |
    t = <FLOATING_POINT_LITERAL>
    {
        jjtThis.jjtSetValue(new Scalar (Double.parseDouble (t.image)));
    }
}
