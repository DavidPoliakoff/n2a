options
{
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    NODE_DEFAULT_VOID = true;          // Only create Node classes for the #Tokens
}

PARSER_BEGIN(ExpressionParser)

/*
Copyright 2013,2016 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

package gov.sandia.n2a.language.parse;

import gov.sandia.n2a.language.type.Scalar;
import gov.sandia.n2a.language.type.Text;

import java.io.StringReader;
import javax.measure.unit.Unit;

public class ExpressionParser
{
    public static SimpleNode parse (String line) throws ParseException
    {
        try
        {
            ExpressionParser parser = new ExpressionParser (new StringReader (line));
            Node startNode = parser.Start ();
            SimpleNode result = (SimpleNode) startNode.jjtGetChild (0);
            return result;
        }
        catch (TokenMgrError t)
        {
            throw new ParseException ("Lexical error");
        }
    }
}
PARSER_END(ExpressionParser)


// Tokens --------------------------------------------------------------------

<*> SKIP:
{
    " " | "\t"
}

TOKEN:
{
      <COMMA:   "," >
    | <SEMI:    ";" >
    | <GT:      ">" >
    | <LT:      "<" >
    | <EQ:      "==">
    | <LE:      "<=">
    | <GE:      ">=">
    | <NE:      "!=">
    | <AND:     "&&">
    | <OR:      "||">
    | <PLUS:    "+" >
    | <MINUS:   "-" >
    | <MUL:     "*" >
    | <HADAMUL: "&" >
    | <DIV:     "/" >
    | <MOD:     "%" >
    | <NOT:     "!" >
    | <POWER:   "^" >
    | <TILDE:   "~" >
    | <LSQ:     "[" >
    | <RSQ:     "]" >
    | <LRND:    "(" >
    | <RRND:    ")" >

    | <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(<PRIME>)*>
    | <#LETTER: ["A"-"Z", "a"-"z", "_", "$", "."]>
    | <#DIGIT:  ["0"-"9"]>
    | <#PRIME:  "'">

    | <NUMBER:
          (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
        |            "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+                (<EXPONENT>)?> : PossibleUnit
    | <#EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+>

    | <STRING: "\"" ((~["\"","\\"]) | ("\\" ["n","t","b","r","f","\\","'","\""]))* "\"">
}

<PossibleUnit> TOKEN:
{
      <UNIT:
        ["\"","#","'","0"-":","?"-"]","_"-"{"]  // Everything in ASCII 33-126, except forbidden start characters and }
        (["!"-"'","*"-"|","~"])*                // Everything in ASCII 33-126, except parentheses and }
        (["}"])?> : DEFAULT                     // If there is a }, it always ends the unit expression.

    | <UCOMMA:   ","  > {matchedToken.kind = ExpressionParserConstants.COMMA;  }: DEFAULT
    | <USEMI:    ";"  > {matchedToken.kind = ExpressionParserConstants.SEMI;   }: DEFAULT
    | <UGT:      ">"  > {matchedToken.kind = ExpressionParserConstants.GT;     }: DEFAULT
    | <ULT:      "<"  > {matchedToken.kind = ExpressionParserConstants.LT;     }: DEFAULT
    | <UEQ:      "==" > {matchedToken.kind = ExpressionParserConstants.EQ;     }: DEFAULT
    | <ULE:      "<=" > {matchedToken.kind = ExpressionParserConstants.LE;     }: DEFAULT
    | <UGE:      ">=" > {matchedToken.kind = ExpressionParserConstants.GE;     }: DEFAULT
    | <UNE:      "!=" > {matchedToken.kind = ExpressionParserConstants.NE;     }: DEFAULT
    | <UAND:     "&&" > {matchedToken.kind = ExpressionParserConstants.AND;    }: DEFAULT
    | <UOR:      "||" > {matchedToken.kind = ExpressionParserConstants.OR;     }: DEFAULT
    | <UPLUS:    "+"  > {matchedToken.kind = ExpressionParserConstants.PLUS;   }: DEFAULT
    | <UMINUS:   "-"  > {matchedToken.kind = ExpressionParserConstants.MINUS;  }: DEFAULT
    | <UMUL:     "*"  > {matchedToken.kind = ExpressionParserConstants.MUL;    }: DEFAULT
    | <UHADAMUL: "&"  > {matchedToken.kind = ExpressionParserConstants.HADAMUL;}: DEFAULT
    | <UDIV:     "/"  > {matchedToken.kind = ExpressionParserConstants.DIV;    }: DEFAULT
    | <UMOD:     "%"  > {matchedToken.kind = ExpressionParserConstants.MOD;    }: DEFAULT
    | <UNOT:     "!"  > {matchedToken.kind = ExpressionParserConstants.NOT;    }: DEFAULT
    | <UPOWER:   "^"  > {matchedToken.kind = ExpressionParserConstants.POWER;  }: DEFAULT
    | <UTILDE:   "~"  > {matchedToken.kind = ExpressionParserConstants.TILDE;  }: DEFAULT
    | <ULRND:    "("  > {matchedToken.kind = ExpressionParserConstants.LRND;   }: DEFAULT
    | <URRND:    ")"  > {matchedToken.kind = ExpressionParserConstants.RRND;   }: DEFAULT
}


// Grammar -------------------------------------------------------------------

ASTStart Start() #Start : {}
{
    CommaExpression() <EOF>
    {
        return jjtThis;
    }
}

void CommaExpression() #List : {}
{
    OrExpression() (<COMMA> OrExpression())*
    {
    	jjtThis.jjtSetValue("LIST");
    }
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR> AndExpression()
            {
                jjtThis.jjtSetValue("||");
            }
        ) #Operator(2)
    )*
}

void AndExpression() : {}
{
    EqualExpression()
    (
        (<AND> EqualExpression()
            {
                jjtThis.jjtSetValue("&&");
            }
        ) #Operator(2)
    )*
}

void EqualExpression() : {}
{
    RelationalExpression()
    (
        (<NE> RelationalExpression()
            {
                jjtThis.jjtSetValue("!=");
            }
        ) #Operator(2)
          |
        (<EQ> RelationalExpression()
            {
                jjtThis.jjtSetValue("==");
            }
        ) #Operator(2)
    )*
}

void RelationalExpression() : {}
{
    AdditiveExpression()
    (
        (<LT> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<");
            }
        ) #Operator(2)
          |
        (<GT> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">");
            }
        ) #Operator(2)
          |
        (<LE> AdditiveExpression()
            {
                jjtThis.jjtSetValue("<=");
            }
        ) #Operator(2)
          |
        (<GE> AdditiveExpression()
            {
                jjtThis.jjtSetValue(">=");
            }
        ) #Operator(2)
    )*
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        (<PLUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("+");
            }
        ) #Operator(2)
          |
        (<MINUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue("-");
            }
        ) #Operator(2)
    )*
}

void MultiplicativeExpression() : {}
{
    PowerExpression()
    (
        (<MUL> PowerExpression()
            {
                jjtThis.jjtSetValue("*");
            }
        ) #Operator(2)
          |
        (<HADAMUL> PowerExpression()
            {
                jjtThis.jjtSetValue("&");
            }
        ) #Operator(2)
          |
        (<DIV> PowerExpression()
            {
                jjtThis.jjtSetValue("/");
            }
        ) #Operator(2)
          |
        (<MOD> PowerExpression()
            {
                jjtThis.jjtSetValue("%");
            }
        ) #Operator(2)
    )*
}

// TODO: Make this rule right-associative. This is, a^b^c is parsed as a^(b^c).
void PowerExpression() : {}
{
    UnaryExpression()
    (
        (<POWER> UnaryExpression()
            {
                jjtThis.jjtSetValue("^");
            }
        ) #Operator(2)
    )*
}

// TODO: Make this rule recursive and right-associative.
void UnaryExpression() : {}
{
    (<MINUS> PrimaryExpression()
        {
            jjtThis.jjtSetValue("UM");
        }
    ) #Operator(1)
      |
    (<NOT> PrimaryExpression()
        {
            jjtThis.jjtSetValue("!");
        }
    ) #Operator(1)
      |
    (<TILDE> PrimaryExpression()
        {
            jjtThis.jjtSetValue("~");
        }
    ) #Operator(1)
      |
    PrimaryExpression()
}

void PrimaryExpression() : {}
{
    Constant()
      |
    Identifier()
      |
    <LRND> OrExpression() <RRND> 
      |
    MatrixExpression()
}

// TODO: Make () an operation that applies to any expression, not just variables and functions.
void MatrixExpression() #Matrix : {}
{
    <LSQ> CommaExpression() (<SEMI> CommaExpression())* <RSQ>
}

void Identifier() #Identifier : {Token t;}
{
    t = <IDENTIFIER> [<LRND> CommaExpression() <RRND>]
    {
        jjtThis.jjtSetValue(t.image);
    }
}

void Constant() #Constant : {Token t; Token u = null;}
{
    t = <STRING>
    {
        Text text = new Text (t.image.substring (1, t.image.length() - 1));
        text.removeEscapes ();
        jjtThis.jjtSetValue (text);
    }
      |
    t = <NUMBER> [u = <UNIT>]
    {
        double value = Double.parseDouble (t.image);
        if (u != null) value = Unit.valueOf (u.image).toStandardUnit ().convert (value);
        jjtThis.jjtSetValue (new Scalar (value));
    }
}
