/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

/* Generated By:JJTree: Do not edit this line. ASTOpNode.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,
 * NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */

package gov.sandia.n2a.language.parse;

import gov.sandia.n2a.language.EvaluationContext;
import gov.sandia.n2a.language.EvaluationException;
import gov.sandia.n2a.language.Function;
import gov.sandia.n2a.language.operator.Assign;


public class ASTOpNode extends ASTNodeBase {


    ////////////////////
    // AUTO-GENERATED //
    ////////////////////

    public ASTOpNode(Object value) {
        super(value, ExpressionParserTreeConstants.JJTOPNODE);
    }

    public ASTOpNode(int id) {
        super(id);
    }

    public ASTOpNode(ExpressionParser p, int id) {
        super(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(ExpressionParserVisitor visitor, Object data) throws ParseException {
        return visitor.visit(this, data);
    }


    ////////////
    // CUSTOM //
    ////////////

    public Function getFunction() {
        return (Function) getValue();
    }

    @Override
    public String toString() {
        return getValue().toString();
    }

    @Override
    public String render(ASTRenderingContext context)
    {
        Object value = getValue ();

        // Long rendering
        if (!context.shortMode)
        {
            String ret = "";
            if (getCount () == 1)
            {
                ret += value.toString();
                ret += context.render (getChild (0));
            }
            else
            {
                if (!(getParent() instanceof ASTStart)) ret += "(";
                ret += context.render (getChild (0));
                ret += " " + value.toString() + " ";
                ret += context.render (getChild (1));
                if (!(getParent() instanceof ASTStart)) ret += ")";
            }
            return ret;
        }

        // Short rendering
        String ret = "";
        if (getCount () == 1)
        {
            ret += value.toString ();
            ret += context.render (getChild (0));
        }
        else
        {
            boolean useParens;
            Function f = (Function) value;

            // Left-hand child
            useParens = false;
            if (getChild (0) instanceof ASTOpNode)
            {
                Function left = (Function) getChild (0).getValue ();
                useParens =    f.precedence < left.precedence   // read "<" as "comes before" rather than "less"
                            ||    f.precedence == left.precedence
                               && f.associativity == Function.Associativity.RIGHT_TO_LEFT;
            }
            if (useParens) ret += "(";
            ret += context.render (getChild (0));
            if (useParens) ret += ")";

            ret += " " + value + " ";

            // Right-hand child
            useParens = false;
            if (getChild (1) instanceof ASTOpNode)
            {
                Function right = (Function) getChild (1).getValue ();
                useParens =    f.precedence < right.precedence
                            ||    f.precedence == right.precedence
                               && f.associativity == Function.Associativity.LEFT_TO_RIGHT;
            }
            if (useParens) ret += "(";
            ret += context.render (getChild (1));
            if (useParens) ret += ")";
        }
        return ret;
    }


    ////////////////
    // EVALUATION //
    ////////////////

    @Override
    public Object eval (EvaluationContext context) throws EvaluationException
    {
        Function func = (Function) getValue ();
        // TODO: func.assignment is obsolete. When using EquationEntry, the AST should never contain an assignment operation, as they are parsed out.
        if (func.assignment)
        {
            if (! (getChild (0) instanceof ASTVarNode)  ||  ((ASTVarNode) getChild (0)).getOrder () != 0)
            {
                throw new EvaluationException ("Invalid left hand side for assignment. Left hand side must be an order-0 variable.");
            }
        }

        int count = getCount ();
        Object[] params = new Object[count];
        for (int c = 0; c < count; c++)
        {
            // We don't want eval to scream if left hand side of a
            // assignment variable hasn't been defined yet.  In
            // other words we don't need/want to evaluate "x" in:
            //    x = 3 + y
            // But we have to in:
            //    x *= 3 + y
            if (c == 0  &&  func.getClass ().equals (Assign.class)) params[c] = null;
            else                                                                params[c] = getChild (c).eval (context);
        }
        Object result = func.eval (params);
        if (func.assignment)
        {
            context.set (((ASTVarNode) getChild (0)).reference.variable, result);
        }
        return result;
    }
}
/* JavaCC - OriginalChecksum=fdb37a0358564ff530164781a4b1ce67 (do not edit this line) */
