/* ExpressionParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParser.java */
/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

package gov.sandia.n2a.language.parse;

import java.lang.reflect.Field;
import java.io.StringReader;

import gov.sandia.n2a.language.Function;
import gov.sandia.n2a.language.type.Scalar;
import gov.sandia.n2a.language.type.Text;

import replete.util.ReflectionUtil;

import javax.measure.unit.*;

public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants, ExpressionParserConstants {/*@bgen(jjtree)*/
  protected JJTExpressionParserState jjtree = new JJTExpressionParserState();public static ASTNodeBase parse (String line) throws ParseException
    {
        if (line == null)
        {
            throw new IllegalArgumentException ("Line to parse cannot be null.");
        }

        // The following classes perform some obvious transformations to the AST before returning it:
        // List[A (only one node)] --> A
        // Variable[List[A B C ...]] --> Variable[A B C ...]
        // Function[List[A B C ...]] --> Function[A B C ...]

        class CollapseList implements ASTNodeTransformer
        {
            public ASTNodeBase transform (ASTNodeBase node)
            {
                if (node.getCount () == 1)
                {
                    return node.getChild (0);
                }
                return node;
            }
        }

        class MakeListIntoChildren implements ASTNodeTransformer
        {
            public ASTNodeBase transform (ASTNodeBase node)
            {
                if (node.getCount () == 1)
                {
                    ASTNodeBase list = node.getChild (0);
                    if (list instanceof ASTListNode)
                    {
                        node.clearChildren ();
                        int count = list.getCount ();
                        for (int i = 0; i < count; i++)
                        {
                            node.setChild (list.getChild (i), i);
                        }
                    }
                }
                return node;
            }
        }

        ASTTransformationContext context = new ASTTransformationContext ();
        MakeListIntoChildren l = new MakeListIntoChildren ();
        context.add (ASTFunNode .class, l);
        context.add (ASTVarNode .class, l);
        context.add (ASTListNode.class, new CollapseList ());

        try
        {
            ExpressionParser parser = new ExpressionParser (new StringReader (line + "\u005cn"));
            Node startNode = parser.Start ();
            ASTNodeBase result = (ASTNodeBase) startNode.jjtGetChild(0);
            result = result.transform (context);
            result.setSource (line);
            return result;
        }
        catch (ParseException p)
        {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            ReflectionUtil.set ("detailMessage", p, p.getMessage ().trim () + "\u005cnSource Line: " + line);
            throw p;
        }
        catch (TokenMgrError t)
        {
            ParseException p = new ParseException (t.getMessage () + "\u005cnSource Line: " + line);
            try
            {
                Field f = Throwable.class.getDeclaredField ("cause");
                f.setAccessible (true);
                f.set (p, t);
            }
            catch (Exception e) {}
            throw p;
        }
    }

    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len)
                break;

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len)
            output.append(inputStr.substring(p));

        return output.toString();
    }

/***************************************************************
GRAMMAR START
***************************************************************/
  final public 
ASTStart Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignExpression();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void AssignExpression() throws ParseException {Token t;
    if (jj_2_1(2147483647)) {
      Variable();
      t = jj_consume_token(ASSIGN);
      CommaExpression();
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
jjtn001.jjtSetValue(Function.get(t.image));
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
    } else if (jj_2_2(1)) {
      CommaExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CommaExpression() throws ParseException {/*@bgen(jjtree) ListNode */
  ASTListNode jjtn000 = new ASTListNode(JJTLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        OrExpression();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue("LIST");
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(OR);
        AndExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("||"));
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(AND);
        EqualExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("&&"));
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void EqualExpression() throws ParseException {
    RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NE:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(NE);
          RelationalExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("!="));
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case EQ:{
ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(EQ);
          RelationalExpression();
jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
jjtn002.jjtSetValue(Function.get("=="));
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LT);
          AdditiveExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("<"));
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case GT:{
ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(GT);
          AdditiveExpression();
jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
jjtn002.jjtSetValue(Function.get(">"));
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      case LE:{
ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(LE);
          AdditiveExpression();
jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
jjtn003.jjtSetValue(Function.get("<="));
        } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
        }
      case GE:{
ASTOpNode jjtn004 = new ASTOpNode(JJTOPNODE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(GE);
          AdditiveExpression();
jjtree.closeNodeScope(jjtn004,  2);
              jjtc004 = false;
jjtn004.jjtSetValue(Function.get(">="));
        } catch (Throwable jjte004) {
if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte004;}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) throw (ParseException)jjte004;}
          }
          {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  2);
          }
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
          MultiplicativeExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("+"));
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case MINUS:{
ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
          MultiplicativeExpression();
jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
jjtn002.jjtSetValue(Function.get("-"));
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnitExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(MUL);
          UnitExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("*"));
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case DIV:{
ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(DIV);
          UnitExpression();
jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
jjtn002.jjtSetValue(Function.get("/"));
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      case MOD:{
ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(MOD);
          UnitExpression();
jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
jjtn003.jjtSetValue(Function.get("%"));
        } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Unary Expression With Units:
   Units act as a post-fix operator with precedence
   higher than +, -, *, /, and %, but lower than 
   ^, unary minus, unary plus, and element []. */
  final public 
void UnitExpression() throws ParseException {Token t;
    if (jj_2_3(2147483647)) {
ASTUnitNode jjtn001 = new ASTUnitNode(JJTUNITNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
        jj_consume_token(LBRC);
        t = jj_consume_token(UNITS);
        jj_consume_token(RBRC);
jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
jjtn001.jjtSetValue(Unit.valueOf(t.image));
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_4(1)) {
      UnaryExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MINUS);
        PowerExpression();
jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
jjtn001.jjtSetValue(Function.get("UM"));
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      break;
      }
    case NOT:{
ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(NOT);
        PowerExpression();
jjtree.closeNodeScope(jjtn002,  1);
          jjtc002 = false;
jjtn002.jjtSetValue(Function.get("!"));
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
      }
      }
      break;
      }
    case TILDE:{
ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(TILDE);
        PowerExpression();
jjtree.closeNodeScope(jjtn003,  1);
          jjtc003 = false;
jjtn003.jjtSetValue(Function.get("~"));
      } catch (Throwable jjte003) {
if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_5(1)) {
        PowerExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// TODO: Make this rule recursive and right-associative
// In other words: a^b^c is parsed as a^(b^c)
  final public void PowerExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(POWER);
        PrimaryExpression();
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
jjtn001.jjtSetValue(Function.get("^"));
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:{
      Constant();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == LRND) {
        Function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          Variable();
          break;
          }
        case LRND:{
          jj_consume_token(LRND);
          OrExpression();
          jj_consume_token(RRND);
          break;
          }
        case LSQ:{
          MatrixExpression();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void MatrixExpression() throws ParseException {/*@bgen(jjtree) MatrixNode */
    ASTMatrixNode jjtn000 = new ASTMatrixNode(JJTMATRIXNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);jjtn000.jjtSetValue("MATRIX");
    try {
      jj_consume_token(LSQ);
      CommaExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMI:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(SEMI);
        CommaExpression();
      }
      jj_consume_token(RSQ);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Variable() throws ParseException {/*@bgen(jjtree) VarNode */
    ASTVarNode jjtn000 = new ASTVarNode(JJTVARNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQ:{
        jj_consume_token(LSQ);
        CommaExpression();
        jj_consume_token(RSQ);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Function() throws ParseException {/*@bgen(jjtree) FunNode */
    ASTFunNode jjtn000 = new ASTFunNode(JJTFUNNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LRND);
      if (jj_2_6(1)) {
        CommaExpression();
      } else {
        ;
      }
      jj_consume_token(RRND);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(Function.get(t.image,true));
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Constant() throws ParseException {/*@bgen(jjtree) Constant */
    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtn000.jjtSetValue(new Text (temp));
        break;
        }
      case FLOATING_POINT_LITERAL:{
        t = jj_consume_token(FLOATING_POINT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(new Scalar (Double.parseDouble (t.image)));
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(2).kind == LRND;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LBRC)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LBRC)) return true;
    if (jj_scan_token(UNITS)) return true;
    if (jj_scan_token(RBRC)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LRND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x8000000,0x4000000,0x2400000,0x2400000,0x1b00000,0x1b00000,0x30000000,0x30000000,0xc0000000,0xc0000000,0x20000000,0x0,0x280,0x400,0x80000,0x0,0x280,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0xa,0x4,0x0,0x50,0x0,0x10,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
