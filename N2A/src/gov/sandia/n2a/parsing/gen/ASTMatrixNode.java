/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

/* Generated By:JJTree: Do not edit this line. ASTMatrixNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package gov.sandia.n2a.parsing.gen;

import gov.sandia.n2a.parsing.functions.EvaluationContext;
import gov.sandia.n2a.parsing.functions.EvaluationException;

public class ASTMatrixNode extends ASTNodeBase
{
    ////////////////////
    // AUTO-GENERATED //
    ////////////////////

    public ASTMatrixNode(int id) {
        super(id);
    }

    public ASTMatrixNode(ExpressionParser p, int id) {
        super(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(ExpressionParserVisitor visitor, Object data) throws ParseException {
        return visitor.visit(this, data);
    }


    ////////////
    // CUSTOM //
    ////////////

    public int getRows ()
    {
        return getCount ();
    }

    public int getColumns ()
    {
        int result = 0;
        int count = getCount ();
        for (int i = 0; i < count; i++)
        {
            result = Math.max (result, getChild (i).getCount ());
        }
        return result;
    }

    @Override
    public String toString ()
    {
        return getValue().toString ();
    }

    @Override
    public String render (ASTRenderingContext context)
    {
        // Long & Short rendering
        int rows = getRows ();
        int cols = getColumns ();
        StringBuilder result = new StringBuilder ();
        result.append ("[");
        for (int r = 0; r < rows; r++)
        {
            if (r > 0)
            {
                result.append (";");
            }
            ASTNodeBase row = getChild (r);
            int count = row.getCount ();
            int c = 0;
            for (; c < count; c++)
            {
                if (c > 0)
                {
                    result.append (",");
                }
                result.append (context.render (row.getChild (c)));
            }
            for (; c < cols; c++)
            {
                if (c > 0)
                {
                    result.append (",");
                }
                result.append ("0");
            }
        }
        result.append ("]");
        return result.toString ();
    }


    ////////////////
    // EVALUATION //
    ////////////////

    /**
        @todo Settle on linear algebra library, then return a proper Matrix object.
    **/
    @Override
    public Object eval (EvaluationContext context) throws EvaluationException
    {
        int rows = getRows ();
        int cols = getColumns ();
        Object[][] result = new Object[rows][cols];
        for (int r = 0; r < rows; r++)
        {
            ASTNodeBase row = getChild (r);
            int count = row.getCount ();
            int c = 0;
            for (; c < count; c++)
            {
                result[r][c] = row.getChild (c).eval (context);
            }
            for (; c < cols; c++)
            {
                result[r][c] = new Double (0);
            }
        }
        return result;
    }
}
/* JavaCC - OriginalChecksum=f0cd9fdeb1bb8b5b8c935f3373ed6fd0 (do not edit this line) */
