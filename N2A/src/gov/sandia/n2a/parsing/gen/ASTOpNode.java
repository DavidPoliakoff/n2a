/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

/* Generated By:JJTree: Do not edit this line. ASTOpNode.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,
 * NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */

package gov.sandia.n2a.parsing.gen;

import gov.sandia.n2a.parsing.functions.AssignmentFunction;
import gov.sandia.n2a.parsing.functions.Associativity;
import gov.sandia.n2a.parsing.functions.EvaluationContext;
import gov.sandia.n2a.parsing.functions.EvaluationException;
import gov.sandia.n2a.parsing.functions.Function;
import gov.sandia.n2a.parsing.functions.FunctionList;
import gov.sandia.n2a.parsing.functions.ListSubscriptExpression;
import gov.sandia.n2a.parsing.functions.UnaryPlusFunction;


public class ASTOpNode extends ASTNodeBase {


    ////////////////////
    // AUTO-GENERATED //
    ////////////////////

    public ASTOpNode(Object value) {
        super(value, ExpressionParserTreeConstants.JJTOPNODE);
    }

    public ASTOpNode(int id) {
        super(id);
    }

    public ASTOpNode(ExpressionParser p, int id) {
        super(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(ExpressionParserVisitor visitor, Object data) throws ParseException {
        return visitor.visit(this, data);
    }


    ////////////
    // CUSTOM //
    ////////////

    public Function getFunction() {
        return (Function) getValue();
    }

    @Override
    public String toString() {
        return getValue().toString();
    }

    @Override
    public String render(ASTRenderingContext context)
    {
        Object value = getValue ();

        // Long rendering
        if(!context.shortMode) {
            String ret = "";
            if(value instanceof ListSubscriptExpression) {
                ret += context.render (getChild (0));
                ret += "[" + context.render (getChild(1)) + "]";
            } else if(getCount() == 1) {
                ret += value.toString();
                ret += context.render (getChild (0));
            } else {
                if(!(getParent() instanceof ASTStart)) {
                    ret += "(";
                }
                ret += context.render (getChild (0));
                ret += " " + value.toString() + " ";
                ret += context.render (getChild (1));
                if(!(getParent() instanceof ASTStart)) {
                    ret += ")";
                }
            }
            return ret;
        }

        // Short rendering
        String ret = "";
        if(value instanceof ListSubscriptExpression) {
            ret += context.render (getChild (0));
            ret += "[" + context.render (getChild (1)) + "]";
        } else if(getCount() == 1) {
            if(!(value instanceof UnaryPlusFunction)) {
                ret += value.toString();
            }
            ret += context.render (getChild (0));
        } else {
            boolean useParens;
            Function thisFunc = (Function) value;
            int thisPrecLevel = FunctionList.getPrecedenceLevel(thisFunc);
            Associativity thisAssoc = FunctionList.getAssociativity(thisFunc);

            // Left-hand child
            useParens = false;
            if(getChild(0) instanceof ASTOpNode) {
                int rightPrecLevel = FunctionList.getPrecedenceLevel(
                    (Function) getChild(0).getValue ());
                if(thisPrecLevel > rightPrecLevel ||
                        thisPrecLevel == rightPrecLevel &&
                        thisAssoc == Associativity.RIGHT_TO_LEFT) {
                    useParens = true;
                }
            }

            if(useParens) {
                ret += "(";
            }
            ret += context.render (getChild (0));
            if(useParens) {
                ret += ")";
            }

            ret += " " + value + " ";

            // Right-hand child
            useParens = false;
            if(getChild(1) instanceof ASTOpNode) {
                int rightPrecLevel = FunctionList.getPrecedenceLevel(
                    (Function) getChild(1).getValue());
                if(thisPrecLevel > rightPrecLevel ||
                        thisPrecLevel == rightPrecLevel &&
                        thisAssoc == Associativity.LEFT_TO_RIGHT) {
                    useParens = true;
                }
            }
            if(useParens) {
                ret += "(";
            }
            ret += context.render (getChild (1));
            if(useParens) {
                ret += ")";
            }
        }
        return ret;
    }


    ////////////////
    // EVALUATION //
    ////////////////

    @Override
    public Object eval(EvaluationContext context) throws EvaluationException {
        Function func = (Function) getValue();
        if(func.isAssignment()) {
            if(!(getChild(0) instanceof ASTVarNode) || ((ASTVarNode)getChild(0)).getOrder() != 0) {
                throw new EvaluationException("Invalid left hand side for assignment.  Left hand side must be an order-0 variable.");
            }
        }
        Object[] params = new Object[getCount()];
        for(int c = 0; c < getCount(); c++) {

            // We don't want eval to scream if left hand side of a
            // assignment variable hasn't been defined yet.  In
            // other words we don't need/want to evaluate "x" in:
            //    x = 3 + y
            // But we have to in:
            //    x *= 3 + y
            if(func.getClass().equals(AssignmentFunction.class) && c == 0) {
                params[c] = null;
            } else {
                params[c] = getChild(c).eval(context);
            }
        }
        Object result = func.eval(params);
        if(func.isAssignment()) {
            context.setValueForVariable(((ASTVarNode) getChild(0)).getVariableName(), result);
        }
        return result;
    }
}
/* JavaCC - OriginalChecksum=fdb37a0358564ff530164781a4b1ce67 (do not edit this line) */
