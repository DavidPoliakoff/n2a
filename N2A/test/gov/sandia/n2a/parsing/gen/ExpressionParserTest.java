/*
Copyright 2013 Sandia Corporation.
Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
the U.S. Government retains certain rights in this software.
Distributed under the BSD-3 license. See the file LICENSE for details.
*/

package gov.sandia.n2a.parsing.gen;

import static org.junit.Assert.fail;
import gov.sandia.n2a.parsing.gen.ASTNodeBase;
import gov.sandia.n2a.parsing.gen.ExpressionParser;
import gov.sandia.n2a.parsing.gen.ParseException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;

import org.junit.Test;

/**
 * This tests the low-level syntactic capabilities and
 * features of the expression parser generated by
 * JavaCC/JJTree.
 *
 * NOTE: This class only tests the first line of the exception
 * object's message.  Therefore, various "Was expecting one of:"
 * and "Source Line:" lines are not validated.
 */

public class ExpressionParserTest {

    @Test(expected=IllegalArgumentException.class)
    public void testNull() throws ParseException {
        ExpressionParser.parse(null);
    }

    @Test
    public void testBlank() {
        expectFail("",       "Encountered \"\" at line 1, column 1.");
        expectFail("  ",     "Encountered \"\" at line 1, column 3.");
        expectFail("\t\n\n", "Encountered \"\" at line 3, column 1.");
    }

    @Test
    public void testGoodNumericLiteralExpressions() throws ParseException {
        String[] exprs = {
            "3",
            "3 + 4",
            "3 - 5 * 6",
            "2 / 4.4 + 2",
            "8 % 2 + 4",
            "4 == 5",
            "5 > -8",
            "3.5 ^ 7.5",
            "9 < 4 ^ (5)",
            "6 <= 9",
            "4.5 >= 2.3",
            "5 != 5",
            "(6 && 4)",
            "4 > 6 || 3 == 3",
            "!4 - +6",
            "--5",
            "++4",
            "6 == ++4",
            "(6 == 6 || 5 > !7) && 3 == 9",
            "6*[5]"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testGoodBooleanLiterals() throws ParseException {
        String[] exprs = {
            "perform = 5 > 4 || false && true",
            "x = !false + 4 - true == false"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    /* Since boolean literals are prohibited, "true" and "false" are simply variable names.
    @Test
    public void testBadBooleanLiterals() {
        // Proves true and false treated as literals, not variables.
        String[] exprs = {
            "true = 4 + 4",  "Encountered \" <ASSIGN> \"= \"\" at line 1, column 6.",
            "false = 4 + 4", "Encountered \" <ASSIGN> \"= \"\" at line 1, column 7."
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }
    */

    @Test
    public void testGoodStringLiteralExpressions() throws ParseException {
        String[] exprs = {
            "\"earth\"",
            "\"earth\" + \"mars\"",
            "\"earth\" - \"mars\"",
            "\"earth\" ^ \"venus\"",
            "\"earth\" == (\"jupiter\") && \"\" != \"pluto\"",
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testGoodVariableExpressions() throws ParseException {
        String[] exprs = {
            "foo",
            "foo + bar",
            "foo - bar * baz",
            "foo / 4.4 + baz",
            "var.name == some.other",
            "var$name > some$other",
            "VAR_0933$name < A_B.t",
            "t' <= __5",
            "VAR$name9'''' >= 0.0",
            "_1_' != what",
            "A_Z09.$ && 4",
            "x > Y || z == q",
            "!rrr - +vv",
            "++VAR_$.d3",
            "B == ++A",
            "!!-B",
            "($$ == 3.4 || xyz > !_123) && a.b == w.$",
            "x..4 > Y || z == q"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }


    @Test
    public void testBadVariableExpressions() {
        String[] exprs = {
            "foo 1",                   "Implicit multiplication not allowed.",
            "foo#bar",                 "Lexical error at line 1, column 4.  Encountered: \"#\" (35), after : \"\"",
            "foo - bar ** baz",        "Encountered \"\" at line 1, column 12.",
            "VAR$name9''' ' >= 0.0",   "Lexical error at line 1, column 14.  Encountered: \"\\'\" (39), after : \"\"",
            "_1_ ' != what",           "Lexical error at line 1, column 5.  Encountered: \"\\'\" (39), after : \"\"",
            "--abc.$23 - 7A",          "Implicit multiplication not allowed.",
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodComplexEquations() throws ParseException {
        String[] exprs = {
            //"x[3+a+cos(derek(1)),9]=b=c=8 && t == ujh ^ (g + u$ - tan(i))",
            "a=\"dog\" ^ derek(a=2, 3e3, cos(x-3))",
            "x=3*x^(2+3)--t^cos(theta')",
            "when = grid(x + y, t'', u[sin''(dd)]-i)"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testBadComplexEquations() {
        String[] exprs = {
            "x[3+a+cos(derek(1),9]=b=c=8 && t == ujh ^ (g + u$ - tan(i))",
              "Encountered \" \"]\" \"] \"\" at line 1, column 21.",
            "a=\"dog\" ^ derek(a=2, 3ee3, cos(x-3))",
              "Implicit multiplication not allowed.",
            "a + $!3",
              "Encountered \" \"!\" \"! \"\" at line 1, column 6."
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodEquations() throws ParseException {
        String[] exprs = {
            "x = 3",
            "x = cos(x)",
            //"sin(y, z) = cos(3)",
            "y = -tan(d == 4, 33)",
            //"x[4] = t_p(cos(v), sin(123))",
            "d = func([y, b, c], [4], tan(var))",
            "x = y = z = 123"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testBadEquations() {
        String[] exprs = {
            "x = ",            "Encountered \"\" at line 1, column 5.",
            "3 = 3",           "Encountered \" <ASSIGN> \"= \"\" at line 1, column 3.",
            "= f",             "Encountered \"\" at line 1, column 1.",
            // The following is not a lexical error:
            //"x$$.d := f^2",    "Lexical error at line 1, column 7.  Encountered: \":\" (58), after : \"\"",
            "x = y = 3 = 123", "Encountered \" <ASSIGN> \"= \"\" at line 1, column 11."
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodFunctionExpressions() throws ParseException {
        String[] exprs = {
            "cos()",
            "cos(x)",
            "sin(y, z)",
            "-tan(d == 4, 33)",
            "t_p(cos(v), sin(123))",
            "func([y, b, c], [4], tan(var))",
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testBadFunctionExpressions() {
        String[] exprs = {
            "cos(x",         "Encountered \"<EOF>\" at line 1, column 6.",
            "cosx)",         "Encountered \" \")\" \") \"\" at line 1, column 5.",
            "cos(,4,5)",     "Encountered \" \",\" \", \"\" at line 1, column 5.",
            "cos(y, b, )",   "Encountered \"\" at line 1, column 11.",
            " cos(y,b,,c)",  "Encountered \"\" at line 1, column 10.",
            "cos(3 2 4)",    "Implicit multiplication not allowed.",
            "cos(y; b; c)",  "Encountered \" \";\" \"; \"\" at line 1, column 6.",
            "22cos(y, b$2)", "Implicit multiplication not allowed.",
            "cos!(43)",      "Encountered \" \"!\" \"! \"\" at line 1, column 4."
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodMatrixExpressions() throws ParseException {
        String[] exprs = {
            "[3]",
            "[3,4,5]",
            "[3;4;5]",
            "[y, b, c]",
            " \t[y; b; c]  \t",
            "[cos(x), sin(y), tan(z)]",
            "[-33 + cc[3], r + cos(y), \"earth\" + 44]",
            "43 * [3, 4, 5]",
            "[1, 2, 3; 4, 5, 6; 7 ^ 2, 8, 9]",
            "[f(x); g(y); h(z)]"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testBadMatrixExpressions() {
        String[] exprs = {
            "[3",              "Encountered \"<EOF>\" at line 1, column 3.",
            "3]",              "Encountered \" \"]\" \"] \"\" at line 1, column 2.",
            "[,4,5]",          "Encountered \"\" at line 1, column 2.",
            "[y, b, ]",        "Encountered \"\" at line 1, column 8.",
            " [y,b,,c]",       "Encountered \"\" at line 1, column 7.",
            "[]",              "Encountered \"\" at line 1, column 2.",
            "[,]",             "Encountered \"\" at line 1, column 2.",
            "[;]",             "Encountered \"\" at line 1, column 2.",
            "[3; 3; ]",        "Encountered \"\" at line 1, column 8.",
            "[; 3; 3]",        "Encountered \"\" at line 1, column 2.",
            "[1, 2; 3]",       "Matrix does not have equal number of columns in each row.",
            "[2; 1, 3]",       "Matrix does not have equal number of columns in each row.",
            "[2; 1; 3, f(x)]", "Matrix does not have equal number of columns in each row.",
            "[3 2 4]",         "Implicit multiplication not allowed.",
            "22[y, b$2]",      "Implicit multiplication not allowed."
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodArrayAccessExpressions() throws ParseException {
        String[] exprs = {
            "alist[3]",
            "alist[3,4,5]",
            "alist.foo[3,4,5]",
            "alist[y, b, c]",
            "alist \t[y, b, c]",
            "alist[cos(x), sin(y), tan(z)]",
            "alist[-33 + cc[3], r + cos(y), \"earth\" + 44]"
        };

        for(String expr : exprs) {
            ExpressionParser.parse(expr);
        }
    }

    @Test
    public void testBadArrayAccessExpressions() {
        String[] exprs = {
            "alist[3",        "Encountered \"<EOF>\" at line 1, column 8.",
            "alist3]",        "Encountered \" \"]\" \"] \"\" at line 1, column 7.",
            "alist[,4,5]",    "Encountered \"\" at line 1, column 7.",
            "alist[y, b, ]",  "Encountered \"\" at line 1, column 13.",
            "alist [y,b,,c]", "Encountered \"\" at line 1, column 12.",
            "alist[]",        "Encountered \"\" at line 1, column 7.",
            "alist[3 2 4]",   "Implicit multiplication not allowed.",
            "alist[y; b; c]", "Implicit multiplication not allowed.",
            "22[y, b$2, c]",  "Implicit multiplication not allowed.",
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testBadUnitSpecification() {
        String[] exprs = {
            "y = x {kg",        "Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\"",
            "y = x kg}",        "Lexical error at line 1, column 9.  Encountered: \"}\" (125), after : \"\"",
            "y = x {}",         "Encountered \" \"}\" \"} \"\" at line 1, column 8.",
            "y = x {s+kg}",     "java.text.ParseException: not a number",
        };

        for(int e = 0; e < exprs.length; e += 2) {
            expectFail(exprs[e], exprs[e + 1]);
        }
    }

    @Test
    public void testGoodUnitsSpecification() throws ParseException {
        String[] exprs = {
            "6.0 {day_sidereal}",
            "y = m*x + b {kg}",
            //"frc {N} = mass2 {kg} * acc {m}",
            "var = (4 + 3) {kg} - 1 {m}",
            "(4 {cm} + 7 {cm}) {m}",
            "y = x {nA} * 10",
            "weight = calcWeight(1, 2, 3) {kg}",
            "[1 {cm}, 2 {cm}, 3 {cm}] {km}",
            "y = 4 {m/s}"
        };

        int x = 0;
        for(String expr : exprs) {
//            System.out.println(x);
            ASTNodeBase node = ExpressionParser.parse(expr);
//            System.out.println(((ASTVarNode) node).getUnit());
//            if(x == 0) {
//                UnitHelper.printUnit(((ASTConstant) node).getUnit());
//            }
            x++;
//            System.out.println(node.toReadableLong());
//            node.dump("  ");
        }
    }


    ///////////////////
    // SUPPPLEMENTAL //
    ///////////////////

    private void expectFail(String line, String expectedError) {
        try {
            ExpressionParser.parse(line);
            fail("Expected error but did not receive one (" + line + ").");
        } catch(Exception e) {
            String msg = e.getMessage();
            if(msg.contains("\n") || msg.contains("\r")) {
                // Use line reader to handle all types of
                // newlines in the same manner.
                BufferedReader reader = new BufferedReader(new StringReader(msg));
                try {
                    msg = reader.readLine();
                } catch(IOException e1) {}
            }
            if(!msg.equals(expectedError)) {
                System.out.println("LINE=" + line);
                System.out.println("ERR=" + msg);
                fail("Expected error message '" + expectedError + "' but received '" + msg + "' (" + line + ").");
            }
        }
    }
}
